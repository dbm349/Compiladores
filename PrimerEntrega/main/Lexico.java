package main;

// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/Luisi/Documents/GitHub/TPCompilador/AnalizadorLexico/Lexico.flex

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import java_cup.runtime.Symbol;
import jflex.core.sym;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\1\0\1\5\3\0\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\12\17\1\20\1\21"+
    "\1\22\1\23\1\24\2\0\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\36\1\44\1\45\1\46\2\36"+
    "\1\47\3\36\1\50\1\0\1\51\1\0\1\52\1\0"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\2\36\1\64\1\65\1\66\1\67\1\70\1\36"+
    "\1\71\1\72\1\73\2\36\1\74\3\36\1\75\1\76"+
    "\1\77\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\12\1\1\1\13\1\14"+
    "\1\15\1\16\7\17\1\20\1\21\6\17\1\22\1\1"+
    "\1\23\1\0\1\24\1\25\1\26\1\0\1\27\1\0"+
    "\1\30\1\31\1\15\1\32\3\17\1\33\11\17\1\34"+
    "\2\0\14\17\1\35\2\17\1\0\7\17\1\0\7\17"+
    "\1\0\3\17\1\36\1\37\2\17\1\0\3\17\1\0"+
    "\2\17\1\0\2\17\1\40\1\0\2\17\1\0\2\17"+
    "\1\0\1\17\1\41\1\0\2\17\1\0\1\17\1\0"+
    "\2\17\1\0\1\17\1\0\2\17\1\0\1\17\1\0"+
    "\2\17\1\0\1\17\1\0\2\17\1\0\1\17\1\0"+
    "\2\17\1\0\1\17\1\0\1\17\1\42\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\2\43\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\2\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\100\0\200\0\300\0\100\0\100\0\100"+
    "\0\100\0\100\0\u0100\0\u0140\0\100\0\u0180\0\u01c0\0\100"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\100\0\100\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\u0580\0\u05c0\0\100\0\u0600\0\100\0\200\0\100\0\100"+
    "\0\u0140\0\u0640\0\100\0\u0680\0\100\0\100\0\100\0\100"+
    "\0\u06c0\0\u0700\0\u0740\0\u02c0\0\u0780\0\u07c0\0\u0800\0\u0840"+
    "\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\100\0\u09c0\0\u0a00"+
    "\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\100\0\u0d40\0\u0d80\0\u0dc0"+
    "\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0"+
    "\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0"+
    "\0\u1200\0\u1240\0\u1280\0\u02c0\0\u02c0\0\u12c0\0\u1300\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u02c0\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u02c0\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0"+
    "\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0"+
    "\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0"+
    "\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0"+
    "\0\u1f00\0\u1f40\0\u1f80\0\u02c0\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\100\0\u02c0\0\u2140\0\u2180\0\u21c0\0\u2200"+
    "\0\u2240\0\u2280\0\100\0\u02c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\24\1\26"+
    "\1\27\3\24\1\30\5\24\1\31\3\24\1\32\1\33"+
    "\1\34\1\2\1\24\1\35\1\24\1\36\1\37\3\24"+
    "\1\40\4\24\1\41\3\24\1\42\1\43\1\44\1\45"+
    "\100\0\2\46\1\0\2\46\1\47\72\46\6\0\1\50"+
    "\110\0\1\16\77\0\1\51\74\0\1\52\1\51\1\0"+
    "\1\16\103\0\1\53\72\0\1\54\4\0\1\55\1\56"+
    "\76\0\1\57\77\0\1\60\73\0\1\24\5\0\23\24"+
    "\2\0\23\24\22\0\1\24\5\0\4\24\1\61\16\24"+
    "\2\0\23\24\22\0\1\24\5\0\4\24\1\62\16\24"+
    "\2\0\23\24\22\0\1\24\5\0\14\24\1\63\6\24"+
    "\2\0\23\24\22\0\1\24\5\0\5\24\1\64\6\24"+
    "\1\65\6\24\2\0\6\24\1\64\14\24\22\0\1\24"+
    "\5\0\17\24\1\66\3\24\2\0\23\24\22\0\1\24"+
    "\5\0\7\24\1\67\13\24\2\0\23\24\22\0\1\24"+
    "\5\0\23\24\2\0\5\24\1\70\15\24\22\0\1\24"+
    "\5\0\23\24\2\0\5\24\1\71\15\24\22\0\1\24"+
    "\5\0\23\24\2\0\14\24\1\72\6\24\22\0\1\24"+
    "\5\0\23\24\2\0\6\24\1\64\5\24\1\73\6\24"+
    "\22\0\1\24\5\0\23\24\2\0\17\24\1\74\3\24"+
    "\22\0\1\24\5\0\23\24\2\0\10\24\1\75\12\24"+
    "\101\0\1\76\20\0\1\77\60\0\16\54\1\100\61\54"+
    "\17\0\1\24\5\0\6\24\1\101\14\24\2\0\23\24"+
    "\22\0\1\24\5\0\2\24\1\102\20\24\2\0\23\24"+
    "\22\0\1\24\5\0\3\24\1\103\17\24\2\0\23\24"+
    "\22\0\1\24\5\0\12\24\1\104\10\24\2\0\23\24"+
    "\22\0\1\24\5\0\10\24\1\105\12\24\2\0\23\24"+
    "\22\0\1\24\5\0\10\24\1\106\12\24\2\0\23\24"+
    "\22\0\1\24\5\0\23\24\2\0\7\24\1\107\13\24"+
    "\22\0\1\24\5\0\23\24\2\0\3\24\1\110\17\24"+
    "\22\0\1\24\5\0\23\24\2\0\4\24\1\111\16\24"+
    "\22\0\1\24\5\0\23\24\2\0\12\24\1\112\10\24"+
    "\22\0\1\24\5\0\23\24\2\0\11\24\1\113\11\24"+
    "\22\0\1\24\5\0\23\24\2\0\11\24\1\114\11\24"+
    "\17\0\1\52\1\51\1\0\1\77\60\0\16\54\1\100"+
    "\5\54\1\115\53\54\17\0\1\24\5\0\10\24\1\116"+
    "\12\24\2\0\23\24\22\0\1\24\5\0\12\24\1\117"+
    "\10\24\2\0\23\24\3\0\2\120\3\0\12\120\1\121"+
    "\5\120\3\121\1\122\17\121\2\120\23\121\3\120\17\0"+
    "\1\24\5\0\10\24\1\123\12\24\2\0\23\24\22\0"+
    "\1\24\5\0\14\24\1\124\6\24\2\0\23\24\22\0"+
    "\1\24\5\0\12\24\1\125\10\24\2\0\23\24\22\0"+
    "\1\24\5\0\23\24\2\0\11\24\1\126\11\24\22\0"+
    "\1\24\5\0\23\24\2\0\12\24\1\127\10\24\3\0"+
    "\2\130\3\0\12\130\1\131\5\130\23\131\2\130\4\131"+
    "\1\132\16\131\3\130\17\0\1\24\5\0\23\24\2\0"+
    "\11\24\1\133\11\24\22\0\1\24\5\0\23\24\2\0"+
    "\14\24\1\134\6\24\22\0\1\24\5\0\23\24\2\0"+
    "\12\24\1\135\10\24\22\0\1\24\5\0\14\24\1\136"+
    "\6\24\2\0\23\24\22\0\1\24\5\0\1\137\22\24"+
    "\2\0\23\24\46\0\1\140\53\0\1\24\5\0\16\24"+
    "\1\141\4\24\2\0\23\24\22\0\1\24\5\0\4\24"+
    "\1\142\11\24\1\141\4\24\2\0\23\24\22\0\1\24"+
    "\5\0\20\24\1\143\2\24\2\0\23\24\22\0\1\24"+
    "\5\0\21\24\1\144\1\24\2\0\23\24\22\0\1\24"+
    "\5\0\4\24\1\145\16\24\2\0\23\24\22\0\1\24"+
    "\5\0\23\24\2\0\14\24\1\146\6\24\22\0\1\24"+
    "\5\0\23\24\2\0\1\24\1\147\21\24\73\0\1\150"+
    "\26\0\1\24\5\0\23\24\2\0\16\24\1\151\4\24"+
    "\22\0\1\24\5\0\23\24\2\0\5\24\1\152\10\24"+
    "\1\151\4\24\22\0\1\24\5\0\23\24\2\0\20\24"+
    "\1\153\2\24\22\0\1\24\5\0\23\24\2\0\21\24"+
    "\1\144\1\24\22\0\1\24\5\0\23\24\2\0\5\24"+
    "\1\145\15\24\3\0\2\154\3\0\12\154\1\155\5\154"+
    "\23\155\2\154\23\155\3\154\17\0\1\24\5\0\17\24"+
    "\1\156\3\24\2\0\23\24\47\0\1\157\52\0\1\24"+
    "\5\0\17\24\1\160\3\24\2\0\23\24\22\0\1\24"+
    "\5\0\2\24\1\161\20\24\2\0\23\24\22\0\1\24"+
    "\5\0\21\24\1\162\1\24\2\0\23\24\3\0\2\163"+
    "\3\0\12\163\1\164\5\163\23\164\2\163\23\164\3\163"+
    "\17\0\1\24\5\0\23\24\2\0\17\24\1\165\3\24"+
    "\74\0\1\166\25\0\1\24\5\0\23\24\2\0\17\24"+
    "\1\167\3\24\22\0\1\24\5\0\23\24\2\0\3\24"+
    "\1\170\17\24\22\0\1\24\5\0\23\24\2\0\21\24"+
    "\1\162\1\24\46\0\1\171\53\0\1\24\5\0\16\24"+
    "\1\172\4\24\2\0\23\24\22\0\1\24\5\0\4\24"+
    "\1\173\16\24\2\0\23\24\45\0\1\174\54\0\1\24"+
    "\5\0\15\24\1\175\5\24\2\0\23\24\22\0\1\24"+
    "\5\0\12\24\1\176\10\24\2\0\23\24\73\0\1\177"+
    "\26\0\1\24\5\0\23\24\2\0\16\24\1\200\4\24"+
    "\22\0\1\24\5\0\23\24\2\0\5\24\1\173\15\24"+
    "\72\0\1\201\27\0\1\24\5\0\23\24\2\0\15\24"+
    "\1\202\5\24\22\0\1\24\5\0\23\24\2\0\12\24"+
    "\1\203\10\24\47\0\1\204\52\0\1\24\5\0\17\24"+
    "\1\205\3\24\2\0\23\24\36\0\1\206\63\0\1\24"+
    "\5\0\6\24\1\207\14\24\2\0\23\24\22\0\1\24"+
    "\5\0\1\210\22\24\2\0\23\24\74\0\1\211\25\0"+
    "\1\24\5\0\23\24\2\0\17\24\1\212\3\24\64\0"+
    "\1\213\35\0\1\24\5\0\23\24\2\0\7\24\1\214"+
    "\13\24\22\0\1\24\5\0\23\24\2\0\1\24\1\215"+
    "\21\24\45\0\1\216\54\0\1\24\5\0\15\24\1\217"+
    "\5\24\2\0\23\24\47\0\1\220\52\0\1\24\5\0"+
    "\17\24\1\221\3\24\2\0\23\24\22\0\1\24\5\0"+
    "\17\24\1\222\3\24\2\0\23\24\72\0\1\223\27\0"+
    "\1\24\5\0\23\24\2\0\15\24\1\224\5\24\74\0"+
    "\1\225\25\0\1\24\5\0\23\24\2\0\17\24\1\226"+
    "\3\24\22\0\1\24\5\0\23\24\2\0\17\24\1\227"+
    "\3\24\36\0\1\230\63\0\1\24\5\0\6\24\1\231"+
    "\14\24\2\0\23\24\30\0\1\232\71\0\1\24\5\0"+
    "\1\233\22\24\2\0\23\24\22\0\1\24\5\0\4\24"+
    "\1\234\16\24\2\0\23\24\64\0\1\235\35\0\1\24"+
    "\5\0\23\24\2\0\7\24\1\236\13\24\56\0\1\237"+
    "\43\0\1\24\5\0\23\24\2\0\1\24\1\240\21\24"+
    "\22\0\1\24\5\0\23\24\2\0\5\24\1\234\15\24"+
    "\47\0\1\241\52\0\1\24\5\0\17\24\1\242\3\24"+
    "\2\0\23\24\43\0\1\243\56\0\1\24\5\0\13\24"+
    "\1\244\7\24\2\0\23\24\74\0\1\245\25\0\1\24"+
    "\5\0\23\24\2\0\17\24\1\246\3\24\70\0\1\243"+
    "\31\0\1\24\5\0\23\24\2\0\13\24\1\244\7\24"+
    "\30\0\1\247\71\0\1\24\5\0\1\250\22\24\2\0"+
    "\23\24\56\0\1\251\43\0\1\24\5\0\23\24\2\0"+
    "\1\24\1\252\21\24\43\0\1\253\56\0\1\24\5\0"+
    "\13\24\1\254\7\24\2\0\23\24\70\0\1\253\31\0"+
    "\1\24\5\0\23\24\2\0\13\24\1\254\7\24\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8896];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\5\11\2\1\1\11\2\1\1\11"+
    "\12\1\2\11\6\1\1\11\1\1\1\11\1\0\2\11"+
    "\1\1\1\0\1\11\1\0\4\11\15\1\1\11\2\0"+
    "\14\1\1\11\2\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\3\1\1\0\2\1\1\0\3\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	BufferedWriter bw;
	File f;
	ArrayList<String> listaSimbolos;
	
	public void writeSymbolTable(String s) throws IOException{
		if(!listaSimbolos.contains(s.split(",")[0])){
			bw.write(s);
			bw.newLine();
			bw.flush();
			listaSimbolos.add(s.split(",")[0]);
		}
	}
	
	public String s = "";
	final int MAX_STRING = 30;
	final int MAX_INT = Short.MAX_VALUE;
	final float MAX_FLOAT = Float.MAX_VALUE;

	private boolean verify_real(String x) throws Exception {
		float f = Float.parseFloat(x);
		if (f < -MAX_FLOAT || f > MAX_FLOAT) {
			throw new Exception("La longitud del lexema "+x+" excede la esperada");
		}
		return true;
	}

	private boolean verify_int(String x) throws Exception {
		try {
			int i = Integer.parseInt(x);
			if (i < -MAX_INT || i > MAX_INT) {
				throw new Exception("La longitud del lexema "+x+" excede la esperada");
			}
		}catch (NumberFormatException e) {
			throw new Exception("La longitud del lexema "+x+" excede la esperada");
		}
		return true;
	}

	private boolean verify_string(String x) throws Exception {
		if (x.length() > MAX_STRING) {
			throw new Exception("La longitud del lexema "+x+" excede la esperada");
		}
		return true;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
  	try{
		String carpeta = System.getProperty("user.dir");
		String ruta = carpeta + "/ts.txt";
		f = new File(ruta);
		bw = new BufferedWriter(new FileWriter(f,true));
		listaSimbolos = new ArrayList<>();
	}catch (IOException e){
		e.printStackTrace();
	}
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
 * @throws Exception 
   */
  @Override  public java_cup.runtime.Symbol next_token() throws Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Caracter no permitido: <" + yytext() + "> en la linea " + yyline);
            }
            // fall through
          case 37: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 38: break;
          case 3:
            { System.out.println("Token ParA encontrado, Lexema "+ yytext());
						s=s+"Token ParA encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 39: break;
          case 4:
            { System.out.println("Token ParC encontrado, Lexema "+ yytext());
						s=s+"Token ParC encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 40: break;
          case 5:
            { System.out.println("Token Multiplicacion encontrado, Lexema "+ yytext());
						s=s+"Token Multiplicacion encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 41: break;
          case 6:
            { System.out.println("Token Suma encontrado, Lexema "+ yytext());
						s=s+"Token Suma encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 42: break;
          case 7:
            { System.out.println("Token Coma encontrado, Lexema "+ yytext());
						s=s+"Token Coma encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 43: break;
          case 8:
            { System.out.println("Token Resta encontrado, Lexema "+ yytext());
						s=s+"Token Resta encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 44: break;
          case 9:
            { System.out.println("Token Division encontrado, Lexema "+ yytext());
						s=s+"Token Division encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 45: break;
          case 10:
            { verify_int(yytext());
							System.out.println("Token Numero encontrado, Lexema "+ yytext());
							s=s+"Token Numero encontrado, Lexema "+ yytext()+"\n";
							writeSymbolTable("_"+ yytext() + ",Numero,,"+ yytext()+ ",");
            }
            // fall through
          case 46: break;
          case 11:
            { System.out.println("Token PuntoC encontrado, Lexema "+ yytext());
						s=s+"Token PuntoC encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 47: break;
          case 12:
            { System.out.println("Token Menor encontrado, Lexema "+ yytext());
						s=s+"Token Menor encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 48: break;
          case 13:
            { System.out.println("Token Igual encontrado, Lexema "+ yytext());
						s=s+"Token Igual encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 49: break;
          case 14:
            { System.out.println("Token Mayor encontrado, Lexema "+ yytext());
						s=s+"Token Mayor encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 50: break;
          case 15:
            { System.out.println("Token VarId encontrado, Lexema "+ yytext());
						s=s+"Token VarId encontrado, Lexema "+ yytext()+"\n";
						writeSymbolTable(yytext() + ",VarId,,"+",");
            }
            // fall through
          case 51: break;
          case 16:
            { System.out.println("Token CorcheteA encontrado, Lexema "+ yytext());
						s=s+"Token CorcheteA encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 52: break;
          case 17:
            { System.out.println("Token CorcheteC encontrado, Lexema "+ yytext());
						s=s+"Token CorcheteC encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 53: break;
          case 18:
            { System.out.println("Token LlaveA encontrado, Lexema "+ yytext());
						s=s+"Token LlaveA encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 54: break;
          case 19:
            { System.out.println("Token LlaveC encontrado, Lexema "+ yytext());
						s=s+"Token LlaveC encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 55: break;
          case 20:
            { verify_string(yytext());
							System.out.println("Token String encontrado, Lexema "+ yytext());
							s=s+"Token String encontrado, Lexema "+ yytext()+"\n";
							writeSymbolTable("_"+ yytext() + ",String,,"+ yytext()+ ","+ yytext().length());
            }
            // fall through
          case 56: break;
          case 21:
            { System.out.println("Token And encontrado, Lexema "+ yytext());
						s=s+"Token And encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 57: break;
          case 22:
            { verify_real(yytext());
							System.out.println("Token Real encontrado, Lexema "+ yytext());
							s=s+"Token Real encontrado, Lexema "+ yytext()+"\n";
							writeSymbolTable("_"+ yytext() + ",Real,,"+ yytext()+ ",");
            }
            // fall through
          case 58: break;
          case 23:
            { System.out.println("Token Asignacion encontrado, Lexema "+ yytext());
						s=s+"Token Asignacion encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 59: break;
          case 24:
            { System.out.println("Token MenorI encontrado, Lexema "+ yytext());
						s=s+"Token MenorI encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 60: break;
          case 25:
            { System.out.println("Token Distinto encontrado, Lexema "+ yytext());
						s=s+"Token Distinto encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 61: break;
          case 26:
            { System.out.println("Token MayorI encontrado, Lexema "+ yytext());
						s=s+"Token MayorI encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 62: break;
          case 27:
            { System.out.println("Token If encontrado, Lexema "+ yytext());
						s=s+"Token If encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 63: break;
          case 28:
            { System.out.println("Token Or encontrado, Lexema "+ yytext());
						s=s+"Token Or encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 64: break;
          case 29:
            { /**/
            }
            // fall through
          case 65: break;
          case 30:
            { System.out.println("Token Print encontrado, Lexema "+ yytext());
						s=s+"Token Print encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 66: break;
          case 31:
            { System.out.println("Token While encontrado, Lexema "+ yytext());
						s=s+"Token While encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 67: break;
          case 32:
            { System.out.println("Token InList encontrado, Lexema "+ yytext());
						s=s+"Token InList encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 68: break;
          case 33:
            { System.out.println("Token DeclareB encontrado, Lexema "+ yytext());
						s=s+"Token DeclareB encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 69: break;
          case 34:
            { System.out.println("Token DeclareE encontrado, Lexema "+ yytext());
						s=s+"Token DeclareE encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 70: break;
          case 35:
            { System.out.println("Token ProgramE encontrado, Lexema "+ yytext());
						s=s+"Token ProgramE encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 71: break;
          case 36:
            { System.out.println("Token ProgramB encontrado, Lexema "+ yytext());
						s=s+"Token ProgramB encontrado, Lexema "+ yytext()+"\n";
            }
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
