package main;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import main.ast.*;

parser code
{:

	static File f = new File("ts.txt");
	private static final String CHAR_VACIO = "$";
	private static BufferedWriter bw;
	String s = "";
	String mensaje = "";
	String Error = "";
	boolean b=false;
	ArrayList<String> listaVarId = new ArrayList<String>();
	ArrayList<String> listaTipos = new ArrayList<String>();
	ArrayList<String> listaSimbolos = new ArrayList<String>();
	ArrayList<String> listaSimbolosNombre = new ArrayList<String>();
	
    public void syntax_error(Symbol s) {
        System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
            + sym.terminalNames[s.sym]+ " no reconocido. valor " + s.value );
        Error = "Error en la linea " + (s.right+1) + " columna " + s.left + ". "
                + sym.terminalNames[s.sym] + " no reconocido. valor " + s.value ;
     
    }
    public void writeSymbolTable2(){
    	try{
			bw = new BufferedWriter(new FileWriter(f,true));
		}catch (IOException e){
			e.printStackTrace();
		}
	
		String Linea = "";

		for (int i = 0; i < listaSimbolos.size(); i++) {
			String A = listaSimbolos.get(i);
			String B = listaSimbolosNombre.get(i);
			if (B=="Const_String"){
				Linea="_"+A+","+B+","+ CHAR_VACIO +","+A+","+A.length();
			}else{
				Linea="_"+A+","+B+","+ CHAR_VACIO +","+A+","+CHAR_VACIO;
			}
			
 			try {
				bw.write(Linea);
				bw.newLine();
				bw.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		listaVarId.clear();
		listaTipos.clear();
		//listaSimbolos.add(s.split(",")[0]);	
	}
    
    
	public void writeSymbolTable() {
		try{
			if (!b) {
				bw = new BufferedWriter(new FileWriter(f,false));
				b=true;
			} else {
				bw = new BufferedWriter(new FileWriter(f,true));
			}
			
		}catch (IOException e){
			e.printStackTrace();
		}
	
		String Linea = "";	
		int j = listaTipos.size();
		for (int i = 0; i < listaVarId.size(); i++) {
			String ID = listaVarId.get(i);
			String T = listaTipos.get(--j);
			//Linea=ID+",VarId,"+T+",,";
			Linea=ID+",VarId,"+T+","+ CHAR_VACIO +"," + CHAR_VACIO;
 			try {
				bw.write(Linea);
				bw.newLine();
				bw.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		listaVarId.clear();
		listaTipos.clear();
		//listaSimbolos.add(s.split(",")[0]);	
	}

:}

action code
{:
:}

terminal

While, If, Else, Print, DeclareB, DeclareE, ProgramB, ProgramE, InList, PInt, PFloat, PString,
And, Or, Mayor, MayorI, Menor, MenorI, Distinto, Igual, Suma, Resta, Multiplicacion, Division,
ParA, ParC, LlaveA, LlaveC, CorcheteA, CorcheteC, Coma, PuntoC, Asignacion;

terminal String VarId, Const_String, Numero, Real;

non terminal

tipo, op_comp, declaracion, listadedeclaraciones, lineadedeclaracion;

non terminal NodoPrograma pgm;
non terminal List<NodoSentencia> programa, listadesentencias;
non terminal NodoSentencia lineadesentencia;
non terminal NodoExpresion expresion, termino, factor;
non terminal NodoAsignacion asignacion;
non terminal NodoSalida salida;
non terminal NodoWhile while;
non terminal NodoCondicion cond, condicionlogica, condicion, inlist;
non terminal NodoIfAbstracto if;
non terminal List<NodoExpresion> listareal;
non terminal List<NodoExpresion> listanumero;
non terminal List<NodoExpresion> listadecte;

start with pgm;

pgm ::=                     declaracion programa:bloque                        {: //System.out.println("pgm Regla 0 Compila correctamente llegando al simbolo start");
                                                                            s = s + "pgm Regla 0 Compila correctamente llegando al simbolo start\n";
                                                                            mensaje += "Reducido: <programa> -> <pgm>\n";
                                                                            writeSymbolTable2();
                                                                            RESULT = new NodoPrograma(bloque);
                                                                            :};

listadesentencias ::=       listadesentencias:bloque_de_instrucciones lineadesentencia:instruccion
                                                                        {://System.out.println("[Regla 1] Sentencias");
                                                                            s = s + "[Regla 1] Sentencias\n";
                                                                            mensaje += "Reducido: <listadesentencias> <lineadesentencia> -> <listadesentencias>\n";
                                                                            bloque_de_instrucciones.add(instruccion);
                                                                            RESULT = bloque_de_instrucciones;
                                                                            //System.out.println("sentencias");
							                                                :}
			                | lineadesentencia:instruccion
			                                                            {:System.out.println("[Regla 2] Sentencia");
							                                                s = s + "[Regla 2] Sentencia\n";
                                                                            mensaje += "Reducido: <lineadesentencia> -> <listadesentencias>\n";
                                                                            ArrayList<NodoSentencia> bloque_de_instrucciones = new ArrayList<NodoSentencia>();
                                                                            bloque_de_instrucciones.add(instruccion);
                                                                            RESULT = bloque_de_instrucciones;
							                                                :};

lineadesentencia ::=        asignacion:asignacion
                                                                        {://System.out.println("[Regla 3] Linea de sentencia - Asignación");
							                                                s = s + "[Regla 3] Linea de sentencia - Asignación\n";
							                                                mensaje += "Reducido: <asignacion> -> <lineadesentencia>\n";
							                                                RESULT = asignacion;
							                                                :}
			                | salida:display
                                                                        {://System.out.println("[Regla 4] Linea de sentencia - Salida");
							                                                s = s + "[Regla 4] Linea de sentencia - Salida\n";
							                                                mensaje += "Reducido: <salida> -> <lineadesentencia>\n";
							                                                RESULT = display;
							                                                :}
			                | while:nodo_while
                                                                        {://System.out.println("[Regla 5] Linea de sentencia - While");
							                                                s = s + "[Regla 5] Linea de sentencia - While\n";
							                                                mensaje += "Reducido: <while> -> <lineadesentencia>\n";
							                                                RESULT = nodo_while;
							                                                :}
			                | if:nodo_if
                                                                        {://System.out.println("[Regla 6] Linea de sentencia - If");
							                                                s = s + "[Regla 6] Linea de sentencia - If\n";
							                                                mensaje += "Reducido: <if> -> <lineadesentencia>\n";
							                                                RESULT = nodo_if;
							                                                :};

tipo ::=                    PInt:in                                     {:System.out.println("[Regla 7] Tipo - INT");
                                                                            s = s + "[Regla 7] Tipo - INT\n";
                                                                            listaTipos.add(in.toString());:}
                            | PFloat:fl                                 {:System.out.println("[Regla 8] Tipo - FLOAT");
                                                                            s = s + "[Regla 8] Tipo - FLOAT\n";
                                                                            listaTipos.add(fl.toString());:}
                            | PString:st                                {:System.out.println("[Regla 9] Tipo - STRING");
                                                                            s = s + "[Regla 9] Tipo - STRING\n";
                                                                            listaTipos.add(st.toString());:};

cond ::=                    condicion:condicion
                                                                        {://System.out.println("[Regla 10] Cond - Condición");
                                                                            s = s + "[Regla 10] Cond - Condición\n";
							                                                mensaje += "Reducido: <condicion> -> <cond>\n";
							                                                RESULT = condicion;
                                                                            :}
                            | condicionlogica:condicion
                                                                        {://System.out.println("[Regla 11] Cond - Condicion Lógica");
                                                                            s = s + "[Regla 11] Cond - Condicion Lógica\n";
							                                                mensaje += "Reducido: <condicion> -> <cond>\n";
							                                                RESULT = condicion;
                                                                            :}
                            | inlist:condicion
                                                                        {://System.out.println("[Regla 12] Cond - InList");
                                                                            s = s + "[Regla 12] Cond - InList\n";
							                                                mensaje += "Reducido: <condicion> -> <cond>\n";
							                                                RESULT = condicion;
                                                                            :};

while ::=                   While ParA cond:condicion ParC LlaveA
                            listadesentencias:bloque LlaveC
                                                                        {://System.out.println("[Regla 13] While");
							                                                s = s + "[Regla 13] While\n";
							                                                mensaje += "Reducido: while ( <cond> ) { <listadesentencias> } -> <while>\n";
							                                                RESULT = new NodoWhile(condicion, bloque);
							                                                :};

if ::=                      If ParA cond:condicion ParC LlaveA
                            listadesentencias:bloque LlaveC
                                                                        {:System.out.println("[Regla 14] If");
							                                                s = s + "[Regla 14] If\n";
							                                                mensaje += "Reducido: if ( <cond> ) { <listadesentencias> } -> <if>\n";
							                                                RESULT = new NodoIf(condicion, bloque);
							                                                :}
			                | If ParA cond:condicion ParC LlaveA
			                listadesentencias:bloque LlaveC Else LlaveA
			                listadesentencias:bloque_else LlaveC
                                                                        {:System.out.println("[Regla 15] If Else");
							                                                s = s + "[Regla 15] If Else\n";
							                                                mensaje += "Reducido: if ( <cond> ) { <listadesentencias> } else { <listadesentencias> } -> <if>\n";
							                                                RESULT = new NodoIfElse(condicion, bloque, bloque_else);
							                                                :};

asignacion ::=              VarId:identificador Asignacion expresion:expresion
                                                                        {://System.out.println("[Regla 16] Asignacion Expresion");
                                                                            //TODO: Comprobar si se puede actualizar tabla de símbolos acá
							                                                s = s + "[Regla 16] Asignacion Expresion\n";
							                                                mensaje += "Reducido: <VarId> <expresion> -> <asignacion>\n";
                                                                            RESULT= new NodoAsignacion(new NodoIdentificador(identificador), expresion);
							                                                :}
                            | VarId:identificador Asignacion Const_String:constante
                                                                        {://System.out.println("[Regla 17] Asignacion String");
                                                                            //TODO: Cambiar valores en la tabla de símbolos
                                                                            s = s + "[Regla 17] Asignacion String\n";
                                                                            listaSimbolos.add(constante.toString());
							                                                mensaje += "Reducido: <VarId> <Const_String> -> <asignacion>\n";
                                                                            RESULT= new NodoAsignacion(new NodoIdentificador(identificador), new NodoConstanteString(constante));
                                                                            listaSimbolosNombre.add("Const_String");:};

expresion ::=               expresion:expresion Suma termino:termino
                                                                        {://System.out.println("[Regla 18] Expresion + Termino");
                                                                            s = s + "[Regla 18] Expresion + Termino\n";
							                                                mensaje += "Reducido: <expresion> + <termino> -> <expresion>\n";
                                                                            RESULT = new NodoSuma(expresion, termino);
                                                                            :}
                            | expresion:expresion Resta termino:termino
                                                                        {://System.out.println("[Regla 19] Expresion - Termino");
                                                                            s = s + "[Regla 19] Expresion - Termino\n";
							                                                mensaje += "Reducido: <expresion> - <termino> -> <expresion>\n";
                                                                            RESULT = new NodoResta(expresion, termino);
                                                                            :}
                            | termino:termino
                                                                        {://System.out.println("[Regla 20] Expresion Termino");
                                                                            s = s + "[Regla 20] Expresion Termino\n";
							                                                mensaje += "Reducido: <termino> -> <expresion>\n";
                                                                            RESULT = termino;
                                                                            :};

termino ::=                 termino:termino Multiplicacion factor:factor
                                                                        {://System.out.println("[Regla 21] Termino * Factor");
                                                                            s = s + "[Regla 21] Termino * Factor\n";
							                                                mensaje += "Reducido: <termino> * <factor> -> <termino>\n";
                                                                            RESULT = new NodoMultiplicacion(termino, factor);
                                                                            :}
                            | termino:termino Division factor:factor
                                                                        {://System.out.println("[Regla 22] Termino / Factor");
                                                                            s = s + "[Regla 22] Termino / Factor\n";
							                                                mensaje += "Reducido: <termino> / <factor> -> <termino>\n";
                                                                            RESULT = new NodoDivision(termino, factor);
                                                                            :}
                            | factor:factor
                                                                        {://System.out.println("[Regla 23] Termino Factor");
                                                                            s = s + "[Regla 23] Termino Factor\n";
							                                                mensaje += "Reducido: <factor> -> <termino>\n";
                                                                            RESULT = factor;
                                                                            :};

factor ::=                  VarId:identificador
                                                                        {://System.out.println("[Regla 24] Factor VarId");
							                                                s = s + "[Regla 24] Factor VarId\n";
							                                                mensaje += "Reducido: <VarId> -> <factor>\n";
                                                                            RESULT = new NodoIdentificador(identificador);
							                                                :}
                            | Numero:numero
                                                                        {://System.out.println("[Regla 25] Factor Numero");
                                                                            s = s + "[Regla 25] Factor Numero\n";
                                                                            listaSimbolos.add(numero.toString());
                                                                            listaSimbolosNombre.add("Numero");
							                                                mensaje += "Reducido: <Numero> -> <factor>\n";
                                                                            RESULT = new NodoConstante(Integer.parseInt(numero));
                                                                            :}
                            | Real:real
                                                                        {://System.out.println("[Regla 26] Factor Real");
                                                                            s = s + "[Regla 26] Factor Real\n";
                                                                            listaSimbolos.add(real.toString());
                                                                            listaSimbolosNombre.add("Real");
                                                                            mensaje += "Reducido: <Real> -> <factor>\n";
                                                                            RESULT = new NodoConstanteFloat(Float.parseFloat(real));
                                                                              :}
                            | ParA expresion:expresion ParC
                                                                        {://System.out.println("[Regla 27] Factor Expresion");
                                                                            s = s + "[Regla 27] Factor Expresion\n";
                                                                            mensaje += "Reducido: ( <expresion> ) -> <factor>\n";
                                                                            RESULT = expresion;
                                                                             :};

salida ::=                  Print Const_String:constante_string
                                                                        {://System.out.println("[Regla 28] Factor Expresion");
                                                                            s = s + "[Regla 28] Factor Expresion\n";
                                                                            listaSimbolos.add(constante_string.toString());
                                                                            listaSimbolosNombre.add("Const_String");
							                                                mensaje += "Reducido: <Const_String> -> <salida>\n";
                                                                            RESULT = new NodoSalida(new NodoConstanteString(constante_string));
                                                                            :};

condicionlogica ::=         ParA condicion:condicion ParC
                                                                        {://System.out.println("[Regla 29] (Condicion)");
                                                                            s = s + "[Regla 29] Condicion\n";
							                                                mensaje += "Reducido: ( <condicion> ) -> <condicionlogica>\n";
							                                                RESULT = condicion;
                                                                            :}
                            | condicion:condicion_izquierda And condicion:condicion_derecha
                                                                        {:System.out.println("[Regla 30] Condicion And Condicion");
                                                                            s = s + "[Regla 30] Condicion And Condicion\n";
							                                                mensaje += "Reducido: <condicion> AND <condicion> -> <condicionlogica>\n";
							                                                RESULT = new NodoAnd(condicion_izquierda, condicion_derecha);

                                                                            :}
                            | condicion:condicion_izquierda  Or condicion:condicion_derecha
                                                                        {:System.out.println("[Regla 31] Condicion Or Condicion");
                                                                            s = s + "[Regla 31] Condicion Or Condicion\n";
							                                                mensaje += "Reducido: <condicion> OR <condicion> -> <condicionlogica>\n";
							                                                RESULT = new NodoOr(condicion_izquierda, condicion_derecha);
                                                                            :}
                            | ParA condicion:condicion_izquierda ParC And ParA
                            condicion:condicion_derecha ParC
                                                                        {:System.out.println("[Regla 32] (Condicion) And (Condicion)");
                                                                            s = s + "[Regla 32] (Condicion) And (Condicion)\n";
							                                                mensaje += "Reducido: ( <condicion> ) AND ( <condicion> ) -> <condicionlogica>\n";
							                                                RESULT = new NodoOr(condicion_izquierda, condicion_derecha);
                                                                            :}
                            | ParA condicion:condicion_izquierda ParC  Or ParA
                            condicion:condicion_derecha ParC
                                                                        {:System.out.println("[Regla 33] (Condicion) Or (Condicion)");
                                                                            s = s + "[Regla 33] (Condicion) Or (Condicion)\n";
							                                                mensaje += "Reducido: ( <condicion> ) OR ( <condicion> ) -> <condicionlogica>\n";
							                                                RESULT = new NodoOr(condicion_izquierda, condicion_derecha);
                                                                            :};

condicion ::=               expresion:expresion_izquierda Mayor expresion:expresion_derecha
                                                                        {://System.out.println("[Regla 35] Operacion Mayor");
			                				                                s = s + "[Regla 35] Operacion Mayor\n";
							                                                mensaje += "Reducido: <expresion> > <expresion> -> <condicion>\n";
							                                                RESULT = new NodoMayor(expresion_izquierda, expresion_derecha);
			                				                                :}
			                | expresion:expresion_izquierda MayorI expresion:expresion_derecha
                                                                        {://System.out.println("[Regla 36] Operacion MayorI");
			                				                                s = s + "[Regla 36] Operacion MayorI\n";
							                                                mensaje += "Reducido: <expresion> >= <expresion> -> <condicion>\n";
							                                                RESULT = new NodoMayorIgual(expresion_izquierda, expresion_derecha);
			                				                                :}
			                | expresion:expresion_izquierda Menor expresion:expresion_derecha
                                                                        {://System.out.println("[Regla 37] Operacion Menor");
			                				                                s = s + "[Regla 37] Operacion Menor\n";
							                                                mensaje += "Reducido: <expresion> < <expresion> -> <condicion>\n";
							                                                RESULT = new NodoMenor(expresion_izquierda, expresion_derecha);
			                				                                :}
			                | expresion:expresion_izquierda MenorI expresion:expresion_derecha
                                                                        {://System.out.println("[Regla 38] Operacion MenorI");
			                				                                s = s + "[Regla 38] Operacion MenorI\n";
							                                                mensaje += "Reducido: <expresion> <= <expresion> -> <condicion>\n";
							                                                RESULT = new NodoMenorIgual(expresion_izquierda, expresion_derecha);
			                				                                :}
			                | expresion:expresion_izquierda Distinto expresion:expresion_derecha
                                                                        {://System.out.println("[Regla 39] Operacion Distinto");
			                				                                s = s + "[Regla 39] Operacion Distinto\n";
							                                                mensaje += "Reducido: <expresion> <> <expresion> -> <condicion>\n";
							                                                RESULT = new NodoDistinto(expresion_izquierda, expresion_derecha);
			                				                                :}
			                | expresion:expresion_izquierda Igual expresion:expresion_derecha
                                                                        {://System.out.println("[Regla 40] Operacion Igual");
							                                                s = s + "[Regla 40] Operacion Igual\n";
							                                                mensaje += "Reducido: <expresion> = <expresion> -> <condicion>\n";
							                                                RESULT = new NodoIgual(expresion_izquierda, expresion_derecha);
							                                                :};

declaracion ::=             DeclareB listadedeclaraciones DeclareE      {:System.out.println("[Regla 41] Declaracion");
							                                                s = s + "[Regla 41] Declaracion\n";

							                                                :};


listadedeclaraciones ::=    CorcheteA lineadedeclaracion CorcheteC      {:System.out.println("[Regla 42] Lista de Declaraciones");
                                                                            s = s + "[Regla 42] Lista de Declaraciones\n";
                                                                            writeSymbolTable();:}
                            | listadedeclaraciones CorcheteA
                            lineadedeclaracion CorcheteC                {:System.out.println("[Regla 43] Lista de Declaraciones multiples");
                                                                            s = s + "[Regla 43] Lista de Declaraciones multiples\n";
                                                                            writeSymbolTable();:};

lineadedeclaracion ::=      VarId:id CorcheteC Asignacion
                            CorcheteA tipo:ti                           {:System.out.println("[Regla 44] Linea de declaracion");
                                                                            s = s + "[Regla 44] Linea de declaracion\n";
                                                                            listaVarId.add(id.toString());:}
                            | VarId:id Coma lineadedeclaracion Coma tipo {:System.out.println("[Regla 45] Linea de declaracion multiple");
                                                                            s = s + "[Regla 45] Linea de declaracion multiple\n";
                                                                            listaVarId.add(id.toString());:};

programa ::=                ProgramB listadesentencias:bloque ProgramE         {:System.out.println("[Regla 46] Programa");
							                                                    s = s + "[Regla 46] Programa\n";
                                                                                mensaje += "Reducido <listadesentencias> a <programa>\n";
							                                                    RESULT = bloque;
							                                                    :};

inlist ::=                  InList ParA VarId:identificador Coma CorcheteA
                            listadecte:lista_constantes CorcheteC ParC
                                                                        {://System.out.println("[Regla 47] InList");
							                                                s = s + "[Regla 47] InList\n";
							                                                mensaje += "Reducido: INLIST ( <VarId>, [ <listadecte> ] ) -> <inlist>\n";
							                                                RESULT = new NodoInList(new NodoIdentificador(identificador), lista_constantes);
							                                                :};

listadecte ::=              listareal:lista
                                                                        {://System.out.println("[Regla 48] Lista de Cte - Real");
                                                                            s = s + "[Regla 48] Lista de Cte - Real\n";
							                                                mensaje += "Reducido: <listareal> -> <listadecte>\n";
							                                                RESULT = lista;
                                                                            :}
                            | listanumero:lista
                                                                        {://System.out.println("[Regla 49] Lista de Cte - Numero");
                                                                            s = s + "[Regla 49] Lista de Cte - Numero\n";
							                                                mensaje += "Reducido: <listanumero> -> <listadecte>\n";
							                                                RESULT = lista;
                                                                            :};

listareal ::=               Real:re
                                                                        {://System.out.println("[Regla 50] Lista de Real");
                                                                            s = s + "[Regla 50] Lista de Real\n";
                                                                            listaSimbolos.add(re.toString());
                                                                            listaSimbolosNombre.add("Real");
							                                                mensaje += "Reducido: <Real> -> <listareal>\n";
                                                                            List<NodoExpresion> expresiones = new ArrayList<NodoExpresion>();
                                                                            expresiones.add(new NodoConstanteFloat(Float.parseFloat(re)));
                                                                            RESULT = expresiones;
                                                                            :}
                            | listareal:expresiones PuntoC Real:re
                                                                        {://System.out.println("[Regla 51] Lista de Real Multiple");
                                                                            s = s + "[Regla 51] Lista de Real Multiple\n";
                                                                            listaSimbolos.add(re.toString());
                                                                            listaSimbolosNombre.add("Real");
							                                                mensaje += "Reducido: <listareal> ; <Real> -> <listareal>\n";
                                                                            expresiones.add(new NodoConstanteFloat(Float.parseFloat(re)));
                                                                            RESULT = expresiones;
                                                                            :};

listanumero ::=             Numero:nu
                                                                        {:System.out.println("[Regla 52] Lista de Numero");
                                                                            s = s + "[Regla 52] Lista de Numero\n";
                                                                            listaSimbolos.add(nu.toString());
                                                                            listaSimbolosNombre.add("Numero");
							                                                mensaje += "Reducido: <Numero> -> <listanumero>\n";
                                                                            List<NodoExpresion> expresiones = new ArrayList<NodoExpresion>();
                                                                            expresiones.add(new NodoConstante(Integer.parseInt(nu)));
                                                                            RESULT = expresiones;
                                                                            :}
                            | listanumero:expresiones PuntoC Numero:nu
                                                                        {:System.out.println("[Regla 53] Lista de Numero Multiple");
                                                                            s = s + "[Regla 53] Lista de Numero Multiple\n";
                                                                            listaSimbolos.add(nu.toString());
                                                                            listaSimbolosNombre.add("Numero");
							                                                mensaje += "Reducido: <listanumero> ; <Numero> -> <listanumero>\n";
                                                                            expresiones.add(new NodoConstante(Integer.parseInt(nu)));
                                                                            RESULT = expresiones;
                                                                            :};