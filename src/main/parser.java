
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\011\000\002\010" +
    "\011\000\002\010\015\000\002\011\005\000\002\011\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\005\000\002\015\004\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\011\000\002\016\011\000" +
    "\002\017\005\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\005\000\002\022\005\000\002\022\006" +
    "\000\002\023\007\000\002\023\007\000\002\024\005\000" +
    "\002\025\012\000\002\026\003\000\002\026\003\000\002" +
    "\027\003\000\002\027\005\000\002\030\003\000\002\030" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\004\010\005\001\002\000\004\002\171\001" +
    "\002\000\004\041\146\001\002\000\004\012\007\001\002" +
    "\000\012\004\013\005\012\007\022\020\014\001\002\000" +
    "\004\002\000\001\002\000\016\004\ufffa\005\ufffa\007\ufffa" +
    "\013\ufffa\020\ufffa\040\ufffa\001\002\000\004\035\133\001" +
    "\002\000\004\035\051\001\002\000\004\045\026\001\002" +
    "\000\016\004\ufffe\005\ufffe\007\ufffe\013\ufffe\020\ufffe\040" +
    "\ufffe\001\002\000\016\004\ufffb\005\ufffb\007\ufffb\013\ufffb" +
    "\020\ufffb\040\ufffb\001\002\000\016\004\ufffc\005\ufffc\007" +
    "\ufffc\013\ufffc\020\ufffc\040\ufffc\001\002\000\016\004\ufffd" +
    "\005\ufffd\007\ufffd\013\ufffd\020\ufffd\040\ufffd\001\002\000" +
    "\014\004\013\005\012\007\022\013\025\020\014\001\002" +
    "\000\004\050\023\001\002\000\016\004\uffe4\005\uffe4\007" +
    "\uffe4\013\uffe4\020\uffe4\040\uffe4\001\002\000\016\004\uffff" +
    "\005\uffff\007\uffff\013\uffff\020\uffff\040\uffff\001\002\000" +
    "\004\002\uffd2\001\002\000\014\020\030\035\034\046\027" +
    "\047\033\050\031\001\002\000\050\004\uffe7\005\uffe7\007" +
    "\uffe7\013\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\036\uffe7\040\uffe7\001\002\000\050\004\uffe8" +
    "\005\uffe8\007\uffe8\013\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\036\uffe8\040\uffe8\001\002\000" +
    "\016\004\uffef\005\uffef\007\uffef\013\uffef\020\uffef\040\uffef" +
    "\001\002\000\050\004\uffe9\005\uffe9\007\uffe9\013\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036" +
    "\uffe9\040\uffe9\001\002\000\050\004\uffe6\005\uffe6\007\uffe6" +
    "\013\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\036\uffe6\040\uffe6\001\002\000\012\020\030\035" +
    "\034\046\027\047\033\001\002\000\050\004\uffec\005\uffec" +
    "\007\uffec\013\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\043\034\042\036\uffec\040\uffec\001\002\000\022\004" +
    "\ufff0\005\ufff0\007\ufff0\013\ufff0\020\ufff0\031\040\032\037" +
    "\040\ufff0\001\002\000\012\020\030\035\034\046\027\047" +
    "\033\001\002\000\012\020\030\035\034\046\027\047\033" +
    "\001\002\000\050\004\uffee\005\uffee\007\uffee\013\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\043\034\042\036" +
    "\uffee\040\uffee\001\002\000\012\020\030\035\034\046\027" +
    "\047\033\001\002\000\012\020\030\035\034\046\027\047" +
    "\033\001\002\000\050\004\uffeb\005\uffeb\007\uffeb\013\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\036\uffeb\040\uffeb\001\002\000\050\004\uffea\005\uffea\007" +
    "\uffea\013\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\036\uffea\040\uffea\001\002\000\050\004\uffed" +
    "\005\uffed\007\uffed\013\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\043\034\042\036\uffed\040\uffed\001\002\000" +
    "\010\031\040\032\037\036\050\001\002\000\050\004\uffe5" +
    "\005\uffe5\007\uffe5\013\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\036\uffe5\040\uffe5\001\002\000" +
    "\014\014\060\020\030\035\056\046\027\047\033\001\002" +
    "\000\004\036\ufff4\001\002\000\022\023\105\024\110\025" +
    "\102\026\104\027\103\030\106\031\040\032\037\001\002" +
    "\000\004\036\127\001\002\000\010\021\123\022\124\036" +
    "\ufff6\001\002\000\012\020\030\035\034\046\027\047\033" +
    "\001\002\000\004\036\ufff5\001\002\000\004\035\061\001" +
    "\002\000\004\020\062\001\002\000\004\043\063\001\002" +
    "\000\004\041\064\001\002\000\006\046\065\047\070\001" +
    "\002\000\006\042\uffcc\044\uffcc\001\002\000\006\042\uffcf" +
    "\044\076\001\002\000\004\042\074\001\002\000\006\042" +
    "\uffce\044\uffce\001\002\000\006\042\uffd0\044\072\001\002" +
    "\000\004\047\073\001\002\000\006\042\uffcd\044\uffcd\001" +
    "\002\000\004\036\075\001\002\000\004\036\uffd1\001\002" +
    "\000\004\046\077\001\002\000\006\042\uffcb\044\uffcb\001" +
    "\002\000\004\036\112\001\002\000\024\023\105\024\110" +
    "\025\102\026\104\027\103\030\106\031\040\032\037\036" +
    "\050\001\002\000\012\020\uffdb\035\uffdb\046\uffdb\047\uffdb" +
    "\001\002\000\012\020\uffd9\035\uffd9\046\uffd9\047\uffd9\001" +
    "\002\000\012\020\uffda\035\uffda\046\uffda\047\uffda\001\002" +
    "\000\012\020\uffdd\035\uffdd\046\uffdd\047\uffdd\001\002\000" +
    "\012\020\uffd8\035\uffd8\046\uffd8\047\uffd8\001\002\000\012" +
    "\020\030\035\034\046\027\047\033\001\002\000\012\020" +
    "\uffdc\035\uffdc\046\uffdc\047\uffdc\001\002\000\014\021\uffde" +
    "\022\uffde\031\040\032\037\036\uffde\001\002\000\010\021" +
    "\113\022\114\036\uffe3\001\002\000\004\035\120\001\002" +
    "\000\004\035\115\001\002\000\012\020\030\035\034\046" +
    "\027\047\033\001\002\000\004\036\117\001\002\000\004" +
    "\036\uffdf\001\002\000\012\020\030\035\034\046\027\047" +
    "\033\001\002\000\004\036\122\001\002\000\004\036\uffe0" +
    "\001\002\000\012\020\030\035\034\046\027\047\033\001" +
    "\002\000\012\020\030\035\034\046\027\047\033\001\002" +
    "\000\004\036\uffe1\001\002\000\004\036\uffe2\001\002\000" +
    "\004\037\130\001\002\000\012\004\013\005\012\007\022" +
    "\020\014\001\002\000\014\004\013\005\012\007\022\020" +
    "\014\040\132\001\002\000\016\004\ufff3\005\ufff3\007\ufff3" +
    "\013\ufff3\020\ufff3\040\ufff3\001\002\000\014\014\060\020" +
    "\030\035\056\046\027\047\033\001\002\000\004\036\135" +
    "\001\002\000\004\037\136\001\002\000\012\004\013\005" +
    "\012\007\022\020\014\001\002\000\014\004\013\005\012" +
    "\007\022\020\014\040\140\001\002\000\020\004\ufff2\005" +
    "\ufff2\006\141\007\ufff2\013\ufff2\020\ufff2\040\ufff2\001\002" +
    "\000\004\037\142\001\002\000\012\004\013\005\012\007" +
    "\022\020\014\001\002\000\014\004\013\005\012\007\022" +
    "\020\014\040\144\001\002\000\016\004\ufff1\005\ufff1\007" +
    "\ufff1\013\ufff1\020\ufff1\040\ufff1\001\002\000\006\011\165" +
    "\041\166\001\002\000\004\020\147\001\002\000\006\042" +
    "\153\043\152\001\002\000\004\042\151\001\002\000\006" +
    "\011\uffd6\041\uffd6\001\002\000\004\020\147\001\002\000" +
    "\004\045\154\001\002\000\004\041\155\001\002\000\010" +
    "\015\156\016\157\017\161\001\002\000\006\042\ufff9\043" +
    "\ufff9\001\002\000\006\042\ufff8\043\ufff8\001\002\000\006" +
    "\042\uffd4\043\uffd4\001\002\000\006\042\ufff7\043\ufff7\001" +
    "\002\000\004\043\163\001\002\000\010\015\156\016\157" +
    "\017\161\001\002\000\006\042\uffd3\043\uffd3\001\002\000" +
    "\004\012\uffd7\001\002\000\004\020\147\001\002\000\004" +
    "\042\170\001\002\000\006\011\uffd5\041\uffd5\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\006\002\003\021\005\001\001\000\002\001" +
    "\001\000\004\022\144\001\001\000\004\024\007\001\001" +
    "\000\016\003\020\004\014\007\015\010\010\011\017\015" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\023\007\015\010\010\011\017\015\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\035\013\034\014\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\046\013" +
    "\034\014\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\045\014\031\001\001\000\006\013\040\014" +
    "\031\001\001\000\002\001\001\000\004\014\044\001\001" +
    "\000\004\014\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\053\012\052\013\034\014\031\016\056\017" +
    "\054\025\051\001\001\000\002\001\001\000\004\020\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\100\013\034\014\031\017\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\066\027\070\030\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\110" +
    "\013\034\014\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\052\013\034\014\031\017\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\052\013\034" +
    "\014\031\017\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\052\013\034\014\031\017\125\001\001" +
    "\000\012\012\052\013\034\014\031\017\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\130\004\014\007\015\010\010\011\017\015\016\001" +
    "\001\000\014\004\023\007\015\010\010\011\017\015\016" +
    "\001\001\000\002\001\001\000\020\006\133\012\052\013" +
    "\034\014\031\016\056\017\054\025\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\136\004\014\007" +
    "\015\010\010\011\017\015\016\001\001\000\014\004\023" +
    "\007\015\010\010\011\017\015\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\142\004\014\007\015" +
    "\010\010\011\017\015\016\001\001\000\014\004\023\007" +
    "\015\010\010\011\017\015\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	static File f = new File("ts.txt");
	private static BufferedWriter bw;
	String s = "";
	String Error = "";
	boolean b=false;
	ArrayList<String> listaVarId = new ArrayList<String>();
	ArrayList<String> listaTipos = new ArrayList<String>();
	ArrayList<String> listaSimbolos = new ArrayList<String>();
	ArrayList<String> listaSimbolosNombre = new ArrayList<String>();
	
    public void syntax_error(Symbol s) {
        System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
            + s + " no reconocido. valor " + s.value );
        Error = "Error en la linea " + (s.right+1) + " columna " + s.left + ". "
                + s + " no reconocido. valor " + s.value ;
     
    }
    public void writeSymbolTable2(){
    	try{
			bw = new BufferedWriter(new FileWriter(f,true));
		}catch (IOException e){
			e.printStackTrace();
		}
	
		String Linea = "";	

		for (int i = 0; i < listaSimbolos.size(); i++) {
			String A = listaSimbolos.get(i);
			String B = listaSimbolosNombre.get(i);
			if (B=="Const_String"){
				Linea="_"+A+","+B+",,"+A+","+A.length();
			}else{
				Linea="_"+A+","+B+",,"+A+",";
			}
			
 			try {
				bw.write(Linea);
				bw.newLine();
				bw.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		listaVarId.clear();
		listaTipos.clear();
		//listaSimbolos.add(s.split(",")[0]);	
	}
    
    
	public void writeSymbolTable(){
		try{
			if (!b) {
				bw = new BufferedWriter(new FileWriter(f,false));
				b=true;
			} else {
				bw = new BufferedWriter(new FileWriter(f,true));
			}
			
		}catch (IOException e){
			e.printStackTrace();
		}
	
		String Linea = "";	
		int j = listaTipos.size();
		for (int i = 0; i < listaVarId.size(); i++) {
			String ID = listaVarId.get(i);
			String T = listaTipos.get(--j);
			Linea=ID+",VarId,"+T+",,";
 			try {
				bw.write(Linea);
				bw.newLine();
				bw.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		listaVarId.clear();
		listaTipos.clear();
		//listaSimbolos.add(s.split(",")[0]);	
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pgm EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pgm ::= declaracion programa 
            {
              Object RESULT =null;
		 System.out.println("pgm Regla 0 Compila correctamente llegando al simbolo start");
							s = s + "pgm Regla 0 Compila correctamente llegando al simbolo start\n";
							writeSymbolTable2();
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgm",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listadesentencias ::= listadesentencias lineadesentencia 
            {
              Object RESULT =null;
		System.out.println("[Regla 1] Sentencias"); 
							s = s + "[Regla 1] Sentencias\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadesentencias",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listadesentencias ::= lineadesentencia 
            {
              Object RESULT =null;
		System.out.println("[Regla 2] Sentencia"); 
							s = s + "[Regla 2] Sentencia\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadesentencias",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lineadesentencia ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("[Regla 3] Linea de sentencia - Asignación"); 
							s = s + "[Regla 3] Linea de sentencia - Asignación\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadesentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lineadesentencia ::= salida 
            {
              Object RESULT =null;
		System.out.println("[Regla 4] Linea de sentencia - Salida"); 
							s = s + "[Regla 4] Linea de sentencia - Salida\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadesentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lineadesentencia ::= while 
            {
              Object RESULT =null;
		System.out.println("[Regla 5] Linea de sentencia - While"); 
							s = s + "[Regla 5] Linea de sentencia - While\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadesentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lineadesentencia ::= if 
            {
              Object RESULT =null;
		System.out.println("[Regla 6] Linea de sentencia - If"); 
							s = s + "[Regla 6] Linea de sentencia - If\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadesentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= PInt 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 7] Tipo - INT"); 
							s = s + "[Regla 7] Tipo - INT\n";
							listaTipos.add(in.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= PFloat 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 8] Tipo - FLOAT"); 
							s = s + "[Regla 8] Tipo - FLOAT\n";
							listaTipos.add(fl.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= PString 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 9] Tipo - STRING"); 
							s = s + "[Regla 9] Tipo - STRING\n";
							listaTipos.add(st.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cond ::= condicion 
            {
              Object RESULT =null;
		System.out.println("[Regla 10] Cond - Condición"); 
							s = s + "[Regla 10] Cond - Condición\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cond ::= condicionlogica 
            {
              Object RESULT =null;
		System.out.println("[Regla 11] Cond - Condicion Lógica"); 
							s = s + "[Regla 11] Cond - Condicion Lógica\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cond ::= inlist 
            {
              Object RESULT =null;
		System.out.println("[Regla 12] Cond - InList"); 
							s = s + "[Regla 12] Cond - InList\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // while ::= While ParA cond ParC LlaveA listadesentencias LlaveC 
            {
              Object RESULT =null;
		System.out.println("[Regla 13] While"); 
							s = s + "[Regla 13] While\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // if ::= If ParA cond ParC LlaveA listadesentencias LlaveC 
            {
              Object RESULT =null;
		System.out.println("[Regla 14] If"); 
							s = s + "[Regla 14] If\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if ::= If ParA cond ParC LlaveA listadesentencias LlaveC Else LlaveA listadesentencias LlaveC 
            {
              Object RESULT =null;
		System.out.println("[Regla 15] If Else"); 
							s = s + "[Regla 15] If Else\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asignacion ::= VarId Asignacion expresion 
            {
              Object RESULT =null;
		System.out.println("[Regla 16] Asignacion Expresion"); 
							s = s + "[Regla 16] Asignacion Expresion\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asignacion ::= VarId Asignacion Const_String 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 17] Asignacion String"); 
							s = s + "[Regla 17] Asignacion String\n";
							listaSimbolos.add(cs.toString());
							listaSimbolosNombre.add("Const_String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= expresion Suma termino 
            {
              Object RESULT =null;
		System.out.println("[Regla 18] Expresion + Termino"); 
							s = s + "[Regla 18] Expresion + Termino\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion Resta termino 
            {
              Object RESULT =null;
		System.out.println("[Regla 19] Expresion - Termino"); 
							s = s + "[Regla 19] Expresion - Termino\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= termino 
            {
              Object RESULT =null;
		System.out.println("[Regla 20] Expresion Termino"); 
							s = s + "[Regla 20] Expresion Termino\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // termino ::= termino Multiplicacion factor 
            {
              Object RESULT =null;
		System.out.println("[Regla 21] Termino * Factor"); 
							s = s + "[Regla 21] Termino * Factor\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // termino ::= termino Division factor 
            {
              Object RESULT =null;
		System.out.println("[Regla 22] Termino / Factor"); 
							s = s + "[Regla 22] Termino / Factor\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // termino ::= factor 
            {
              Object RESULT =null;
		System.out.println("[Regla 23] Termino Factor"); 
							s = s + "[Regla 23] Termino Factor\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // factor ::= VarId 
            {
              Object RESULT =null;
		System.out.println("[Regla 24] Factor VarId"); 
							s = s + "[Regla 24] Factor VarId\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // factor ::= Numero 
            {
              Object RESULT =null;
		int nuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 25] Factor Numero"); 
							s = s + "[Regla 25] Factor Numero\n";
							listaSimbolos.add(nu.toString());
							listaSimbolosNombre.add("Numero");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= Real 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 26] Factor Real"); 
							s = s + "[Regla 26] Factor Real\n";
							listaSimbolos.add(re.toString());
							listaSimbolosNombre.add("Real");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= ParA expresion ParC 
            {
              Object RESULT =null;
		System.out.println("[Regla 27] Factor Expresion"); 
							s = s + "[Regla 27] Factor Expresion\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // salida ::= Print Const_String 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 28] Factor Expresion"); 
							s = s + "[Regla 28] Factor Expresion\n";
							listaSimbolos.add(cs.toString());
							listaSimbolosNombre.add("Const_String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicionlogica ::= ParA condicion ParC 
            {
              Object RESULT =null;
		System.out.println("[Regla 29] (Condicion)"); 
							s = s + "[Regla 29] Condicion\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicionlogica ::= condicion And condicion 
            {
              Object RESULT =null;
		System.out.println("[Regla 30] Condicion And Condicion"); 
							s = s + "[Regla 30] Condicion And Condicion\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicionlogica ::= condicion Or condicion 
            {
              Object RESULT =null;
		System.out.println("[Regla 31] Condicion Or Condicion"); 
							s = s + "[Regla 31] Condicion Or Condicion\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicionlogica ::= ParA condicion ParC And ParA condicion ParC 
            {
              Object RESULT =null;
		System.out.println("[Regla 32] (Condicion) And (Condicion)"); 
							s = s + "[Regla 32] (Condicion) And (Condicion)\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicionlogica ::= ParA condicion ParC Or ParA condicion ParC 
            {
              Object RESULT =null;
		System.out.println("[Regla 33] (Condicion) Or (Condicion)"); 
							s = s + "[Regla 33] (Condicion) Or (Condicion)\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= expresion op_comp expresion 
            {
              Object RESULT =null;
		System.out.println("[Regla 34] Expresion Operacion Logica Expresion"); 
							s = s + "[Regla 34] Expresion Operacion Logica Expresion\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_comp ::= Mayor 
            {
              Object RESULT =null;
		System.out.println("[Regla 35] Operacion Mayor"); 
							s = s + "[Regla 35] Operacion Mayor\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_comp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_comp ::= MayorI 
            {
              Object RESULT =null;
		System.out.println("[Regla 36] Operacion MayorI"); 
							s = s + "[Regla 36] Operacion MayorI\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_comp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op_comp ::= Menor 
            {
              Object RESULT =null;
		System.out.println("[Regla 37] Operacion Menor"); 
							s = s + "[Regla 37] Operacion Menor\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_comp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_comp ::= MenorI 
            {
              Object RESULT =null;
		System.out.println("[Regla 38] Operacion MenorI"); 
							s = s + "[Regla 38] Operacion MenorI\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_comp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_comp ::= Distinto 
            {
              Object RESULT =null;
		System.out.println("[Regla 39] Operacion Distinto"); 
							s = s + "[Regla 39] Operacion Distinto\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_comp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op_comp ::= Igual 
            {
              Object RESULT =null;
		System.out.println("[Regla 40] Operacion Igual"); 
							s = s + "[Regla 40] Operacion Igual\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_comp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion ::= DeclareB listadedeclaraciones DeclareE 
            {
              Object RESULT =null;
		System.out.println("[Regla 41] Declaracion"); 
							s = s + "[Regla 41] Declaracion\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listadedeclaraciones ::= CorcheteA lineadedeclaracion CorcheteC 
            {
              Object RESULT =null;
		System.out.println("[Regla 42] Lista de Declaraciones"); 
							s = s + "[Regla 42] Lista de Declaraciones\n";
							writeSymbolTable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadedeclaraciones",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listadedeclaraciones ::= listadedeclaraciones CorcheteA lineadedeclaracion CorcheteC 
            {
              Object RESULT =null;
		System.out.println("[Regla 43] Lista de Declaraciones multiples"); 
							s = s + "[Regla 43] Lista de Declaraciones multiples\n";
							writeSymbolTable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadedeclaraciones",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lineadedeclaracion ::= VarId CorcheteC Asignacion CorcheteA tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 44] Linea de declaracion"); 
							s = s + "[Regla 44] Linea de declaracion\n";
							listaVarId.add(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadedeclaracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lineadedeclaracion ::= VarId Coma lineadedeclaracion Coma tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.println("[Regla 45] Linea de declaracion multiple"); 
							s = s + "[Regla 45] Linea de declaracion multiple\n";
							listaVarId.add(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadedeclaracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // programa ::= ProgramB listadesentencias ProgramE 
            {
              Object RESULT =null;
		System.out.println("[Regla 46] Programa"); 
							s = s + "[Regla 46] Programa\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // inlist ::= InList ParA VarId Coma CorcheteA listadecte CorcheteC ParC 
            {
              Object RESULT =null;
		System.out.println("[Regla 47] InList"); 
							s = s + "[Regla 47] InList\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inlist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listadecte ::= listareal 
            {
              Object RESULT =null;
		System.out.println("[Regla 48] Lista de Cte - Real"); 
							s = s + "[Regla 48] Lista de Cte - Real\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadecte",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listadecte ::= listanumero 
            {
              Object RESULT =null;
		System.out.println("[Regla 49] Lista de Cte - Numero"); 
							s = s + "[Regla 49] Lista de Cte - Numero\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadecte",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listareal ::= Real 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 50] Lista de Real"); 
							s = s + "[Regla 50] Lista de Real\n";
							listaSimbolos.add(re.toString());
							listaSimbolosNombre.add("Real");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listareal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listareal ::= listareal PuntoC Real 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 51] Lista de Real Multiple"); 
							s = s + "[Regla 51] Lista de Real Multiple\n";
							listaSimbolos.add(re.toString());
							listaSimbolosNombre.add("Real");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listareal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listanumero ::= Numero 
            {
              Object RESULT =null;
		int nuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 52] Lista de Numero"); 
							s = s + "[Regla 52] Lista de Numero\n";
							listaSimbolos.add(nu.toString());
							listaSimbolosNombre.add("Numero");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listanumero",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listanumero ::= listanumero PuntoC Numero 
            {
              Object RESULT =null;
		int nuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 53] Lista de Numero Multiple"); 
							s = s + "[Regla 53] Lista de Numero Multiple\n";
							listaSimbolos.add(nu.toString());
							listaSimbolosNombre.add("Numero");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listanumero",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
