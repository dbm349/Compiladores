
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java_cup.runtime.Symbol;
import main.ast.*;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\007\004\000\002\011" +
    "\004\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\020\011\000\002\025" +
    "\011\000\002\025\015\000\002\016\005\000\002\016\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\005\000\002\017\004\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\011\000\002\022\011\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\004" +
    "\005\000\002\005\005\000\002\005\006\000\002\006\007" +
    "\000\002\006\007\000\002\010\005\000\002\024\012\000" +
    "\002\030\003\000\002\030\003\000\002\026\003\000\002" +
    "\026\005\000\002\027\003\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\004\010\005\001\002\000\004\002\175\001" +
    "\002\000\004\040\152\001\002\000\004\012\007\001\002" +
    "\000\012\004\013\005\012\007\022\045\014\001\002\000" +
    "\004\002\000\001\002\000\016\004\ufffa\005\ufffa\007\ufffa" +
    "\013\ufffa\037\ufffa\045\ufffa\001\002\000\004\034\137\001" +
    "\002\000\004\034\051\001\002\000\004\044\026\001\002" +
    "\000\016\004\ufffe\005\ufffe\007\ufffe\013\ufffe\037\ufffe\045" +
    "\ufffe\001\002\000\016\004\ufffb\005\ufffb\007\ufffb\013\ufffb" +
    "\037\ufffb\045\ufffb\001\002\000\016\004\ufffc\005\ufffc\007" +
    "\ufffc\013\ufffc\037\ufffc\045\ufffc\001\002\000\016\004\ufffd" +
    "\005\ufffd\007\ufffd\013\ufffd\037\ufffd\045\ufffd\001\002\000" +
    "\014\004\013\005\012\007\022\013\025\045\014\001\002" +
    "\000\004\046\023\001\002\000\016\004\uffe4\005\uffe4\007" +
    "\uffe4\013\uffe4\037\uffe4\045\uffe4\001\002\000\016\004\uffff" +
    "\005\uffff\007\uffff\013\uffff\037\uffff\045\uffff\001\002\000" +
    "\004\002\uffd3\001\002\000\014\034\034\045\030\046\031" +
    "\047\027\050\033\001\002\000\050\004\uffe7\005\uffe7\007" +
    "\uffe7\013\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\035\uffe7\037\uffe7\045\uffe7\001\002\000\050\004\uffe8" +
    "\005\uffe8\007\uffe8\013\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\035\uffe8\037\uffe8\045\uffe8\001\002\000" +
    "\016\004\uffef\005\uffef\007\uffef\013\uffef\037\uffef\045\uffef" +
    "\001\002\000\050\004\uffe9\005\uffe9\007\uffe9\013\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\035\uffe9\037" +
    "\uffe9\045\uffe9\001\002\000\050\004\uffe6\005\uffe6\007\uffe6" +
    "\013\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\035\uffe6\037\uffe6\045\uffe6\001\002\000\012\034\034\045" +
    "\030\047\027\050\033\001\002\000\050\004\uffec\005\uffec" +
    "\007\uffec\013\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\043" +
    "\033\042\035\uffec\037\uffec\045\uffec\001\002\000\022\004" +
    "\ufff0\005\ufff0\007\ufff0\013\ufff0\030\040\031\037\037\ufff0" +
    "\045\ufff0\001\002\000\012\034\034\045\030\047\027\050" +
    "\033\001\002\000\012\034\034\045\030\047\027\050\033" +
    "\001\002\000\050\004\uffee\005\uffee\007\uffee\013\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\043\033\042\035\uffee\037" +
    "\uffee\045\uffee\001\002\000\012\034\034\045\030\047\027" +
    "\050\033\001\002\000\012\034\034\045\030\047\027\050" +
    "\033\001\002\000\050\004\uffeb\005\uffeb\007\uffeb\013\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb" +
    "\037\uffeb\045\uffeb\001\002\000\050\004\uffea\005\uffea\007" +
    "\uffea\013\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\035\uffea\037\uffea\045\uffea\001\002\000\050\004\uffed" +
    "\005\uffed\007\uffed\013\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\043\033\042\035\uffed\037\uffed\045\uffed\001\002\000" +
    "\010\030\040\031\037\035\050\001\002\000\050\004\uffe5" +
    "\005\uffe5\007\uffe5\013\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\035\uffe5\037\uffe5\045\uffe5\001\002\000" +
    "\014\014\057\034\056\045\030\047\027\050\033\001\002" +
    "\000\004\035\ufff4\001\002\000\022\022\105\023\107\024" +
    "\102\025\104\026\103\027\106\030\040\031\037\001\002" +
    "\000\010\020\133\021\134\035\ufff6\001\002\000\004\035" +
    "\127\001\002\000\012\034\034\045\030\047\027\050\033" +
    "\001\002\000\004\034\061\001\002\000\004\035\ufff5\001" +
    "\002\000\004\045\062\001\002\000\004\042\063\001\002" +
    "\000\004\040\064\001\002\000\006\047\065\050\070\001" +
    "\002\000\006\041\uffcd\043\uffcd\001\002\000\006\041\uffd0" +
    "\043\076\001\002\000\004\041\074\001\002\000\006\041" +
    "\uffcf\043\uffcf\001\002\000\006\041\uffd1\043\072\001\002" +
    "\000\004\050\073\001\002\000\006\041\uffce\043\uffce\001" +
    "\002\000\004\035\075\001\002\000\004\035\uffd2\001\002" +
    "\000\004\047\077\001\002\000\006\041\uffcc\043\uffcc\001" +
    "\002\000\004\035\116\001\002\000\024\022\105\023\107" +
    "\024\102\025\104\026\103\027\106\030\040\031\037\035" +
    "\050\001\002\000\012\034\034\045\030\047\027\050\033" +
    "\001\002\000\012\034\034\045\030\047\027\050\033\001" +
    "\002\000\012\034\034\045\030\047\027\050\033\001\002" +
    "\000\012\034\034\045\030\047\027\050\033\001\002\000" +
    "\012\034\034\045\030\047\027\050\033\001\002\000\012" +
    "\034\034\045\030\047\027\050\033\001\002\000\014\020" +
    "\uffdd\021\uffdd\030\040\031\037\035\uffdd\001\002\000\014" +
    "\020\uffd9\021\uffd9\030\040\031\037\035\uffd9\001\002\000" +
    "\014\020\uffde\021\uffde\030\040\031\037\035\uffde\001\002" +
    "\000\014\020\uffdb\021\uffdb\030\040\031\037\035\uffdb\001" +
    "\002\000\014\020\uffda\021\uffda\030\040\031\037\035\uffda" +
    "\001\002\000\014\020\uffdc\021\uffdc\030\040\031\037\035" +
    "\uffdc\001\002\000\010\020\117\021\120\035\uffe3\001\002" +
    "\000\004\034\124\001\002\000\004\034\121\001\002\000" +
    "\012\034\034\045\030\047\027\050\033\001\002\000\004" +
    "\035\123\001\002\000\004\035\uffdf\001\002\000\012\034" +
    "\034\045\030\047\027\050\033\001\002\000\004\035\126" +
    "\001\002\000\004\035\uffe0\001\002\000\004\036\130\001" +
    "\002\000\012\004\013\005\012\007\022\045\014\001\002" +
    "\000\014\004\013\005\012\007\022\037\132\045\014\001" +
    "\002\000\016\004\ufff3\005\ufff3\007\ufff3\013\ufff3\037\ufff3" +
    "\045\ufff3\001\002\000\012\034\034\045\030\047\027\050" +
    "\033\001\002\000\012\034\034\045\030\047\027\050\033" +
    "\001\002\000\004\035\uffe1\001\002\000\004\035\uffe2\001" +
    "\002\000\014\014\057\034\056\045\030\047\027\050\033" +
    "\001\002\000\004\035\141\001\002\000\004\036\142\001" +
    "\002\000\012\004\013\005\012\007\022\045\014\001\002" +
    "\000\014\004\013\005\012\007\022\037\144\045\014\001" +
    "\002\000\020\004\ufff2\005\ufff2\006\145\007\ufff2\013\ufff2" +
    "\037\ufff2\045\ufff2\001\002\000\004\036\146\001\002\000" +
    "\012\004\013\005\012\007\022\045\014\001\002\000\014" +
    "\004\013\005\012\007\022\037\150\045\014\001\002\000" +
    "\016\004\ufff1\005\ufff1\007\ufff1\013\ufff1\037\ufff1\045\ufff1" +
    "\001\002\000\006\011\171\040\172\001\002\000\004\045" +
    "\153\001\002\000\006\041\157\042\156\001\002\000\004" +
    "\041\155\001\002\000\006\011\uffd7\040\uffd7\001\002\000" +
    "\004\045\153\001\002\000\004\044\160\001\002\000\004" +
    "\040\161\001\002\000\010\015\162\016\163\017\165\001" +
    "\002\000\006\041\ufff9\042\ufff9\001\002\000\006\041\ufff8" +
    "\042\ufff8\001\002\000\006\041\uffd5\042\uffd5\001\002\000" +
    "\006\041\ufff7\042\ufff7\001\002\000\004\042\167\001\002" +
    "\000\010\015\162\016\163\017\165\001\002\000\006\041" +
    "\uffd4\042\uffd4\001\002\000\004\012\uffd8\001\002\000\004" +
    "\045\153\001\002\000\004\041\174\001\002\000\006\011" +
    "\uffd6\040\uffd6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\006\004\005\007\003\001\001\000\002\001" +
    "\001\000\004\005\150\001\001\000\004\010\007\001\001" +
    "\000\016\011\020\012\014\016\017\017\016\020\015\025" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\023\016\017\017\016\020\015\025\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\035\014\034\015\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\046\014" +
    "\034\015\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\045\015\031\001\001\000\006\014\040\015" +
    "\031\001\001\000\002\001\001\000\004\015\044\001\001" +
    "\000\004\015\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\052\014\034\015\031\021\054\022\057\023" +
    "\053\024\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\100\014" +
    "\034\015\031\023\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\070\027\065\030\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\114\014\034\015\031\001\001\000\010\013\113\014" +
    "\034\015\031\001\001\000\010\013\112\014\034\015\031" +
    "\001\001\000\010\013\111\014\034\015\031\001\001\000" +
    "\010\013\110\014\034\015\031\001\001\000\010\013\107" +
    "\014\034\015\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\052\014\034\015\031\023\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\052\014\034\015\031\023\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\130\012" +
    "\014\016\017\017\016\020\015\025\010\001\001\000\014" +
    "\012\023\016\017\017\016\020\015\025\010\001\001\000" +
    "\002\001\001\000\012\013\052\014\034\015\031\023\135" +
    "\001\001\000\012\013\052\014\034\015\031\023\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\052" +
    "\014\034\015\031\021\137\022\057\023\053\024\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\142" +
    "\012\014\016\017\017\016\020\015\025\010\001\001\000" +
    "\014\012\023\016\017\017\016\020\015\025\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\146\012" +
    "\014\016\017\017\016\020\015\025\010\001\001\000\014" +
    "\012\023\016\017\017\016\020\015\025\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	static File f = new File("ts.txt");
	private static BufferedWriter bw;
	String s = "";
	String mensaje = "";
	String Error = "";
	boolean b=false;
	ArrayList<String> listaVarId = new ArrayList<String>();
	ArrayList<String> listaTipos = new ArrayList<String>();
	ArrayList<String> listaSimbolos = new ArrayList<String>();
	ArrayList<String> listaSimbolosNombre = new ArrayList<String>();
	
    public void syntax_error(Symbol s) {
        System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
            + sym.terminalNames[s.sym]+ " no reconocido. valor " + s.value );
        Error = "Error en la linea " + (s.right+1) + " columna " + s.left + ". "
                + sym.terminalNames[s.sym] + " no reconocido. valor " + s.value ;
     
    }
    public void writeSymbolTable2(){
    	try{
			bw = new BufferedWriter(new FileWriter(f,true));
		}catch (IOException e){
			e.printStackTrace();
		}
	
		String Linea = "";	

		for (int i = 0; i < listaSimbolos.size(); i++) {
			String A = listaSimbolos.get(i);
			String B = listaSimbolosNombre.get(i);
			if (B=="Const_String"){
				Linea="_"+A+","+B+",,"+A+","+A.length();
			}else{
				Linea="_"+A+","+B+",,"+A+",";
			}
			
 			try {
				bw.write(Linea);
				bw.newLine();
				bw.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		listaVarId.clear();
		listaTipos.clear();
		//listaSimbolos.add(s.split(",")[0]);	
	}
    
    
	public void writeSymbolTable() {
		try{
			if (!b) {
				bw = new BufferedWriter(new FileWriter(f,false));
				b=true;
			} else {
				bw = new BufferedWriter(new FileWriter(f,true));
			}
			
		}catch (IOException e){
			e.printStackTrace();
		}
	
		String Linea = "";	
		int j = listaTipos.size();
		for (int i = 0; i < listaVarId.size(); i++) {
			String ID = listaVarId.get(i);
			String T = listaTipos.get(--j);
			Linea=ID+",VarId,"+T+",,";
 			try {
				bw.write(Linea);
				bw.newLine();
				bw.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		listaVarId.clear();
		listaTipos.clear();
		//listaSimbolos.add(s.split(",")[0]);	
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pgm EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoPrograma start_val = (NodoPrograma)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pgm ::= declaracion programa 
            {
              NodoPrograma RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<NodoSentencia> bloque = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //System.out.println("pgm Regla 0 Compila correctamente llegando al simbolo start");
                                                                            s = s + "pgm Regla 0 Compila correctamente llegando al simbolo start\n";
                                                                            mensaje += "Reducido: <programa> -> <pgm>\n";
                                                                            writeSymbolTable2();
                                                                            RESULT = new NodoPrograma(bloque);
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgm",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listadesentencias ::= listadesentencias lineadesentencia 
            {
              List<NodoSentencia> RESULT =null;
		int bloque_de_instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloque_de_instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> bloque_de_instrucciones = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia instruccion = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 1] Sentencias");
                                                                            s = s + "[Regla 1] Sentencias\n";
                                                                            mensaje += "Reducido: <listadesentencias> <lineadesentencia> -> <listadesentencias>\n";
                                                                            bloque_de_instrucciones.add(instruccion);
                                                                            RESULT = bloque_de_instrucciones;
                                                                            //System.out.println("sentencias");
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadesentencias",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listadesentencias ::= lineadesentencia 
            {
              List<NodoSentencia> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia instruccion = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 2] Sentencia");
							                                                s = s + "[Regla 2] Sentencia\n";
                                                                            mensaje += "Reducido: <lineadesentencia> -> <listadesentencias>\n";
                                                                            ArrayList<NodoSentencia> bloque_de_instrucciones = new ArrayList<NodoSentencia>();
                                                                            bloque_de_instrucciones.add(instruccion);
                                                                            RESULT = bloque_de_instrucciones;
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadesentencias",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lineadesentencia ::= asignacion 
            {
              NodoSentencia RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoAsignacion asignacion = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 3] Linea de sentencia - Asignación");
							                                                s = s + "[Regla 3] Linea de sentencia - Asignación\n";
							                                                mensaje += "Reducido: <asignacion> -> <lineadesentencia>\n";
							                                                RESULT = asignacion;
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadesentencia",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lineadesentencia ::= salida 
            {
              NodoSentencia RESULT =null;
		int displayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int displayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSalida display = (NodoSalida)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 4] Linea de sentencia - Salida");
							                                                s = s + "[Regla 4] Linea de sentencia - Salida\n";
							                                                mensaje += "Reducido: <salida> -> <lineadesentencia>\n";
							                                                RESULT = display;
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadesentencia",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lineadesentencia ::= while 
            {
              NodoSentencia RESULT =null;
		int nodo_whileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodo_whileright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoWhile nodo_while = (NodoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 5] Linea de sentencia - While");
							                                                s = s + "[Regla 5] Linea de sentencia - While\n";
							                                                mensaje += "Reducido: <while> -> <lineadesentencia>\n";
							                                                RESULT = nodo_while;
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadesentencia",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lineadesentencia ::= if 
            {
              NodoSentencia RESULT =null;
		int nodo_ifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodo_ifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoIfAbstracto nodo_if = (NodoIfAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 6] Linea de sentencia - If");
							                                                s = s + "[Regla 6] Linea de sentencia - If\n";
							                                                mensaje += "Reducido: <if> -> <lineadesentencia>\n";
							                                                RESULT = nodo_if;
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadesentencia",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= PInt 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 7] Tipo - INT");
                                                                            s = s + "[Regla 7] Tipo - INT\n";
                                                                            listaTipos.add(in.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= PFloat 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 8] Tipo - FLOAT");
                                                                            s = s + "[Regla 8] Tipo - FLOAT\n";
                                                                            listaTipos.add(fl.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= PString 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 9] Tipo - STRING");
                                                                            s = s + "[Regla 9] Tipo - STRING\n";
                                                                            listaTipos.add(st.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cond ::= condicion 
            {
              NodoCondicion RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCondicion condicion = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 10] Cond - Condición");
                                                                            s = s + "[Regla 10] Cond - Condición\n";
							                                                mensaje += "Reducido: <condicion> -> <cond>\n";
							                                                RESULT = condicion;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cond ::= condicionlogica 
            {
              NodoCondicion RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCondicion condicion = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 11] Cond - Condicion Lógica");
                                                                            s = s + "[Regla 11] Cond - Condicion Lógica\n";
							                                                mensaje += "Reducido: <condicion> -> <cond>\n";
							                                                RESULT = condicion;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cond ::= inlist 
            {
              NodoCondicion RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCondicion condicion = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 12] Cond - InList");
                                                                            s = s + "[Regla 12] Cond - InList\n";
							                                                mensaje += "Reducido: <condicion> -> <cond>\n";
							                                                RESULT = condicion;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // while ::= While ParA cond ParC LlaveA listadesentencias LlaveC 
            {
              NodoWhile RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoCondicion condicion = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> bloque = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("[Regla 13] While");
							                                                s = s + "[Regla 13] While\n";
							                                                mensaje += "Reducido: while ( <cond> ) { <listadesentencias> } -> <while>\n";
							                                                RESULT = new NodoWhile(condicion, bloque);
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // if ::= If ParA cond ParC LlaveA listadesentencias LlaveC 
            {
              NodoIfAbstracto RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoCondicion condicion = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> bloque = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("[Regla 14] If");
							                                                s = s + "[Regla 14] If\n";
							                                                mensaje += "Reducido: if ( <cond> ) { <listadesentencias> } -> <if>\n";
							                                                RESULT = new NodoIf(condicion, bloque);
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if ::= If ParA cond ParC LlaveA listadesentencias LlaveC Else LlaveA listadesentencias LlaveC 
            {
              NodoIfAbstracto RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodoCondicion condicion = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<NodoSentencia> bloque = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bloque_elseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloque_elseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> bloque_else = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("[Regla 15] If Else");
							                                                s = s + "[Regla 15] If Else\n";
							                                                mensaje += "Reducido: if ( <cond> ) { <listadesentencias> } else { <listadesentencias> } -> <if>\n";
							                                                RESULT = new NodoIfElse(condicion, bloque, bloque_else);
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asignacion ::= VarId Asignacion expresion 
            {
              NodoAsignacion RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 16] Asignacion Expresion");
							                                                s = s + "[Regla 16] Asignacion Expresion\n";
							                                                mensaje += "Reducido: <VarId> <expresion> -> <asignacion>\n";
                                                                            RESULT= new NodoAsignacion(new NodoIdentificador(identificador), expresion);
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asignacion ::= VarId Asignacion Const_String 
            {
              NodoAsignacion RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String constante = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 17] Asignacion String");
                                                                            s = s + "[Regla 17] Asignacion String\n";
                                                                            listaSimbolos.add(constante.toString());
							                                                mensaje += "Reducido: <VarId> <Const_String> -> <asignacion>\n";
                                                                            RESULT= new NodoAsignacion(new NodoIdentificador(identificador), new NodoConstanteString(constante));
                                                                            listaSimbolosNombre.add("Const_String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= expresion Suma termino 
            {
              NodoExpresion RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int terminoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int terminoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion termino = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 18] Expresion + Termino");
                                                                            s = s + "[Regla 18] Expresion + Termino\n";
							                                                mensaje += "Reducido: <expresion> + <termino> -> <expresion>\n";
                                                                            RESULT = new NodoSuma(expresion, termino);
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion Resta termino 
            {
              NodoExpresion RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int terminoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int terminoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion termino = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 19] Expresion - Termino");
                                                                            s = s + "[Regla 19] Expresion - Termino\n";
							                                                mensaje += "Reducido: <expresion> - <termino> -> <expresion>\n";
                                                                            RESULT = new NodoResta(expresion, termino);
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= termino 
            {
              NodoExpresion RESULT =null;
		int terminoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int terminoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion termino = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 20] Expresion Termino");
                                                                            s = s + "[Regla 20] Expresion Termino\n";
							                                                mensaje += "Reducido: <termino> -> <expresion>\n";
                                                                            RESULT = termino;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // termino ::= termino Multiplicacion factor 
            {
              NodoExpresion RESULT =null;
		int terminoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int terminoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion termino = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion factor = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 21] Termino * Factor");
                                                                            s = s + "[Regla 21] Termino * Factor\n";
							                                                mensaje += "Reducido: <termino> * <factor> -> <termino>\n";
                                                                            RESULT = new NodoMultiplicacion(termino, factor);
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // termino ::= termino Division factor 
            {
              NodoExpresion RESULT =null;
		int terminoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int terminoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion termino = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion factor = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 22] Termino / Factor");
                                                                            s = s + "[Regla 22] Termino / Factor\n";
							                                                mensaje += "Reducido: <termino> / <factor> -> <termino>\n";
                                                                            RESULT = new NodoDivision(termino, factor);
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // termino ::= factor 
            {
              NodoExpresion RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion factor = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 23] Termino Factor");
                                                                            s = s + "[Regla 23] Termino Factor\n";
							                                                mensaje += "Reducido: <factor> -> <termino>\n";
                                                                            RESULT = factor;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // factor ::= VarId 
            {
              NodoExpresion RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 24] Factor VarId");
							                                                s = s + "[Regla 24] Factor VarId\n";
							                                                mensaje += "Reducido: <VarId> -> <factor>\n";
                                                                            RESULT = new NodoIdentificador(identificador);
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // factor ::= Numero 
            {
              NodoExpresion RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 25] Factor Numero");
                                                                            s = s + "[Regla 25] Factor Numero\n";
                                                                            listaSimbolos.add(numero.toString());
                                                                            listaSimbolosNombre.add("Numero");
							                                                mensaje += "Reducido: <Numero> -> <factor>\n";
                                                                            RESULT = new NodoConstante(Integer.parseInt(numero));
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= Real 
            {
              NodoExpresion RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String real = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 26] Factor Real");
                                                                            s = s + "[Regla 26] Factor Real\n";
                                                                            listaSimbolos.add(real.toString());
                                                                            listaSimbolosNombre.add("Real");
                                                                            mensaje += "Reducido: <Real> -> <factor>\n";
                                                                            RESULT = new NodoConstanteFloat(Float.parseFloat(real));
                                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= ParA expresion ParC 
            {
              NodoExpresion RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresion expresion = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("[Regla 27] Factor Expresion");
                                                                            s = s + "[Regla 27] Factor Expresion\n";
                                                                            mensaje += "Reducido: ( <expresion> ) -> <factor>\n";
                                                                            RESULT = expresion;
                                                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // salida ::= Print Const_String 
            {
              NodoSalida RESULT =null;
		int constante_stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constante_stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String constante_string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 28] Factor Expresion");
                                                                            s = s + "[Regla 28] Factor Expresion\n";
                                                                            listaSimbolos.add(constante_string.toString());
                                                                            listaSimbolosNombre.add("Const_String");
							                                                mensaje += "Reducido: <Const_String> -> <salida>\n";
                                                                            RESULT = new NodoSalida(new NodoConstanteString(constante_string));
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicionlogica ::= ParA condicion ParC 
            {
              NodoCondicion RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoCondicion condicion = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("[Regla 29] (Condicion)");
                                                                            s = s + "[Regla 29] Condicion\n";
							                                                mensaje += "Reducido: ( <condicion> ) -> <condicionlogica>\n";
							                                                RESULT = condicion;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicionlogica ::= condicion And condicion 
            {
              NodoCondicion RESULT =null;
		int condicion_izquierdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicion_izquierdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoCondicion condicion_izquierda = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicion_derechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicion_derecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCondicion condicion_derecha = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 30] Condicion And Condicion");
                                                                            s = s + "[Regla 30] Condicion And Condicion\n";
							                                                mensaje += "Reducido: <condicion> AND <condicion> -> <condicionlogica>\n";
							                                                RESULT = new NodoAnd(condicion_izquierda, condicion_derecha);

                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicionlogica ::= condicion Or condicion 
            {
              NodoCondicion RESULT =null;
		int condicion_izquierdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicion_izquierdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoCondicion condicion_izquierda = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicion_derechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicion_derecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCondicion condicion_derecha = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 31] Condicion Or Condicion");
                                                                            s = s + "[Regla 31] Condicion Or Condicion\n";
							                                                mensaje += "Reducido: <condicion> OR <condicion> -> <condicionlogica>\n";
							                                                RESULT = new NodoOr(condicion_izquierda, condicion_derecha);
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicionlogica ::= ParA condicion ParC And ParA condicion ParC 
            {
              NodoCondicion RESULT =null;
		int condicion_izquierdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicion_izquierdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoCondicion condicion_izquierda = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condicion_derechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicion_derecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoCondicion condicion_derecha = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("[Regla 32] (Condicion) And (Condicion)");
                                                                            s = s + "[Regla 32] (Condicion) And (Condicion)\n";
							                                                mensaje += "Reducido: ( <condicion> ) AND ( <condicion> ) -> <condicionlogica>\n";
							                                                RESULT = new NodoOr(condicion_izquierda, condicion_derecha);
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicionlogica ::= ParA condicion ParC Or ParA condicion ParC 
            {
              NodoCondicion RESULT =null;
		int condicion_izquierdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicion_izquierdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoCondicion condicion_izquierda = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condicion_derechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicion_derecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoCondicion condicion_derecha = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("[Regla 33] (Condicion) Or (Condicion)");
                                                                            s = s + "[Regla 33] (Condicion) Or (Condicion)\n";
							                                                mensaje += "Reducido: ( <condicion> ) OR ( <condicion> ) -> <condicionlogica>\n";
							                                                RESULT = new NodoOr(condicion_izquierda, condicion_derecha);
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= expresion Mayor expresion 
            {
              NodoCondicion RESULT =null;
		int expresion_izquierdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion_izquierdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion_izquierda = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion_derechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_derecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion_derecha = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 35] Operacion Mayor");
			                				                                s = s + "[Regla 35] Operacion Mayor\n";
							                                                mensaje += "Reducido: <expresion> > <expresion> -> <condicion>\n";
							                                                RESULT = new NodoMayor(expresion_izquierda, expresion_derecha);
			                				                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= expresion MayorI expresion 
            {
              NodoCondicion RESULT =null;
		int expresion_izquierdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion_izquierdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion_izquierda = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion_derechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_derecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion_derecha = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 36] Operacion MayorI");
			                				                                s = s + "[Regla 36] Operacion MayorI\n";
							                                                mensaje += "Reducido: <expresion> >= <expresion> -> <condicion>\n";
							                                                RESULT = new NodoMayorIgual(expresion_izquierda, expresion_derecha);
			                				                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= expresion Menor expresion 
            {
              NodoCondicion RESULT =null;
		int expresion_izquierdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion_izquierdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion_izquierda = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion_derechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_derecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion_derecha = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 37] Operacion Menor");
			                				                                s = s + "[Regla 37] Operacion Menor\n";
							                                                mensaje += "Reducido: <expresion> < <expresion> -> <condicion>\n";
							                                                RESULT = new NodoMenor(expresion_izquierda, expresion_derecha);
			                				                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= expresion MenorI expresion 
            {
              NodoCondicion RESULT =null;
		int expresion_izquierdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion_izquierdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion_izquierda = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion_derechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_derecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion_derecha = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 38] Operacion MenorI");
			                				                                s = s + "[Regla 38] Operacion MenorI\n";
							                                                mensaje += "Reducido: <expresion> <= <expresion> -> <condicion>\n";
							                                                RESULT = new NodoMenorIgual(expresion_izquierda, expresion_derecha);
			                				                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicion ::= expresion Distinto expresion 
            {
              NodoCondicion RESULT =null;
		int expresion_izquierdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion_izquierdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion_izquierda = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion_derechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_derecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion_derecha = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 39] Operacion Distinto");
			                				                                s = s + "[Regla 39] Operacion Distinto\n";
							                                                mensaje += "Reducido: <expresion> <> <expresion> -> <condicion>\n";
							                                                RESULT = new NodoDistinto(expresion_izquierda, expresion_derecha);
			                				                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicion ::= expresion Igual expresion 
            {
              NodoCondicion RESULT =null;
		int expresion_izquierdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion_izquierdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion_izquierda = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion_derechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_derecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion_derecha = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 40] Operacion Igual");
							                                                s = s + "[Regla 40] Operacion Igual\n";
							                                                mensaje += "Reducido: <expresion> = <expresion> -> <condicion>\n";
							                                                RESULT = new NodoIgual(expresion_izquierda, expresion_derecha);
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion ::= DeclareB listadedeclaraciones DeclareE 
            {
              Object RESULT =null;
		System.out.println("[Regla 41] Declaracion");
							                                                s = s + "[Regla 41] Declaracion\n";

							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listadedeclaraciones ::= CorcheteA lineadedeclaracion CorcheteC 
            {
              Object RESULT =null;
		System.out.println("[Regla 42] Lista de Declaraciones");
                                                                            s = s + "[Regla 42] Lista de Declaraciones\n";
                                                                            writeSymbolTable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadedeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listadedeclaraciones ::= listadedeclaraciones CorcheteA lineadedeclaracion CorcheteC 
            {
              Object RESULT =null;
		System.out.println("[Regla 43] Lista de Declaraciones multiples");
                                                                            s = s + "[Regla 43] Lista de Declaraciones multiples\n";
                                                                            writeSymbolTable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadedeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lineadedeclaracion ::= VarId CorcheteC Asignacion CorcheteA tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 44] Linea de declaracion");
                                                                            s = s + "[Regla 44] Linea de declaracion\n";
                                                                            listaVarId.add(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadedeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lineadedeclaracion ::= VarId Coma lineadedeclaracion Coma tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.println("[Regla 45] Linea de declaracion multiple");
                                                                            s = s + "[Regla 45] Linea de declaracion multiple\n";
                                                                            listaVarId.add(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadedeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // programa ::= ProgramB listadesentencias ProgramE 
            {
              List<NodoSentencia> RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> bloque = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("[Regla 46] Programa");
							                                                    s = s + "[Regla 46] Programa\n";
                                                                                mensaje += "Reducido <listadesentencias> a <programa>\n";
							                                                    RESULT = bloque;
							                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // inlist ::= InList ParA VarId Coma CorcheteA listadecte CorcheteC ParC 
            {
              NodoCondicion RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lista_constantesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_constantesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoExpresion> lista_constantes = (List<NodoExpresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//System.out.println("[Regla 47] InList");
							                                                s = s + "[Regla 47] InList\n";
							                                                mensaje += "Reducido: INLIST ( <VarId>, [ <listadecte> ] ) -> <inlist>\n";
							                                                RESULT = new NodoInList(new NodoIdentificador(identificador), lista_constantes);
							                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listadecte ::= listareal 
            {
              List<NodoExpresion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<NodoExpresion> lista = (List<NodoExpresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 48] Lista de Cte - Real");
                                                                            s = s + "[Regla 48] Lista de Cte - Real\n";
							                                                mensaje += "Reducido: <listareal> -> <listadecte>\n";
							                                                RESULT = lista;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadecte",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listadecte ::= listanumero 
            {
              List<NodoExpresion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<NodoExpresion> lista = (List<NodoExpresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 49] Lista de Cte - Numero");
                                                                            s = s + "[Regla 49] Lista de Cte - Numero\n";
							                                                mensaje += "Reducido: <listanumero> -> <listadecte>\n";
							                                                RESULT = lista;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadecte",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listareal ::= Real 
            {
              List<NodoExpresion> RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 50] Lista de Real");
                                                                            s = s + "[Regla 50] Lista de Real\n";
                                                                            listaSimbolos.add(re.toString());
                                                                            listaSimbolosNombre.add("Real");
							                                                mensaje += "Reducido: <Real> -> <listareal>\n";
                                                                            List<NodoExpresion> expresiones = new ArrayList<NodoExpresion>();
                                                                            expresiones.add(new NodoConstanteFloat(Float.parseFloat(re)));
                                                                            RESULT = expresiones;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listareal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listareal ::= listareal PuntoC Real 
            {
              List<NodoExpresion> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoExpresion> expresiones = (List<NodoExpresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("[Regla 51] Lista de Real Multiple");
                                                                            s = s + "[Regla 51] Lista de Real Multiple\n";
                                                                            listaSimbolos.add(re.toString());
                                                                            listaSimbolosNombre.add("Real");
							                                                mensaje += "Reducido: <listareal> ; <Real> -> <listareal>\n";
                                                                            expresiones.add(new NodoConstanteFloat(Float.parseFloat(re)));
                                                                            RESULT = expresiones;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listareal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listanumero ::= Numero 
            {
              List<NodoExpresion> RESULT =null;
		int nuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 52] Lista de Numero");
                                                                            s = s + "[Regla 52] Lista de Numero\n";
                                                                            listaSimbolos.add(nu.toString());
                                                                            listaSimbolosNombre.add("Numero");
							                                                mensaje += "Reducido: <Numero> -> <listanumero>\n";
                                                                            List<NodoExpresion> expresiones = new ArrayList<NodoExpresion>();
                                                                            expresiones.add(new NodoConstante(Integer.parseInt(nu)));
                                                                            RESULT = expresiones;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listanumero",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listanumero ::= listanumero PuntoC Numero 
            {
              List<NodoExpresion> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoExpresion> expresiones = (List<NodoExpresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("[Regla 53] Lista de Numero Multiple");
                                                                            s = s + "[Regla 53] Lista de Numero Multiple\n";
                                                                            listaSimbolos.add(nu.toString());
                                                                            listaSimbolosNombre.add("Numero");
							                                                mensaje += "Reducido: <listanumero> ; <Numero> -> <listanumero>\n";
                                                                            expresiones.add(new NodoConstante(Integer.parseInt(nu)));
                                                                            RESULT = expresiones;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listanumero",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
